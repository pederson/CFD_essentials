TODO:

- Figure out how to output the OpenGL window to .png, .tif, .jpg OR make movies to .gif

- Make sure that everything follows the model of having all necessary information contained in the base class, but with added functionality implemented in the derived classes

- Problem writing holey_waveguide_defect geometry simulation to HDF5... only on school computer though

- Geometric Objects need to have an options to do a repeating pattern (either rectangular or circular)

- Explore using Boost library (what can it do for me?)

- Make Simulation class that handles the setup and execution of a simulation
	- Need to finish the equation class and boundary conditions class to do this
	- Make this a base class maybe. Derived classes of FESimulation, FVSimulation, FDSimulation, FDTDSimulation, etc... can be made
	- This should allow the user to run the simulation incrementally (n steps at a time) and access fields in the middle of the simulation

- start using iterators when possible

- Fix Mesh class and SimulationData class to have storage fields for both NodeData and ElementData (where data is associated per node or element, respectively)

- fix all class accessors to have both const and non-const options... this is important

- support boundary properties (with conditions that v=0, etc...)

- Increase encapsulation with getters and setters
- support for cylindrical and polar coordinates (maybe not necessary)

- Interface for libMesh, Eigen, Boost, CGAL, and any other third party libraries that are useful

- make separate object files that can be used elsewhere, like Point3 and Vector3. Or use CGAL.

- Something is wrong with the Hull->contains_point() code... is this a double to float conversion issue?

- color by boundary doesn't work properly (b/c bool conversion to float maybe?)

- Check out the Fluent .cas, .msh and .neu files to see how they are stored. Maybe also be able to read these in and print them out. Also check out Ansys .cmdb and .dsdb format.
- Check out AutoCAD .dxf file format for parametric models. Also look at .obj and .ply formats. Look at .step and .iges files for 3D models

- fix the issue with the gaussian geometric object overwriting all other properties on the mesh

- create an actual converter class (or decide if it is really worth it)

- use max_element and min_element as a means to get the min/max

	***Visualixer todo:
- add a labelled colorbar to the visualixer
- Panning scale needs refinement
- Gimbal lock is still happening during manual rotation
- adding a colorby or alpha before adding an object (mesh, pointcloud) doesn't work b/c the number of points is still unknown... is there a workaround for this?
- Shading and Light source for mesh model viewer
- Don't allow the viewing window to recenter itself for each timestep during simulation



- Doxygen comments for everything
- Equation setter
- Chemistry setter and data (lxcat?)
- Boundary conditions/ Initial Conditions
- Source setter
- Matrix equation assembler (parallelizable)
- Matrix equation solver (parallelizable)


:::::::Done:::::::
X - Mesh Class
X - Visualizer
X - Property setter
X - Geometry builder
X - Convert everything that uses char* to use std::string instead
X - Create separate Static Mesh and Mutable Mesh classes
X - separate out the visualixer classes into separate files
X - SimulationData class
X - Linear Algebra wrapper
X - RegularMesh derived from Mesh
