TODO:

- writing HDF5 with ~1000 time steps is excruciatingly slow... why? It's just fine for 500 time steps

- split up simulation allocation function into field assignment and coefficient assignment

- do time analysis for std::function vs. raw arrays. DONE: std::function is 5-10 times slower than raw arrays in terms of the pure call. 

- combine simdata without doubling the memory requirement

- change prefix for member variables. It has come to my attention that an underscore as a prefix may be a bad idea. possibly use "m_"... instead

- incorporate std::function and lambdas for anything that could use it (all simulations and the SimulationData and SimulationVisualixer)

- create an actual converter class (or decide if it is really worth it)

- use max_element and min_element as a means to get the min/max

- Allow the SimulationData class to store data even if the full data has not been allocated. Figure out how to add time data to a file that already exists

- Make a standard Finite difference derivative operator class or function that accepts a regular mesh and a field variable, then takes the requested derivative (and uses the requested technique for dealing with the boundary)

- Make a way to get the "previous" value for time stepping simulations

- migrate some things to BitBucket or GitLab

- lxcat for cross section and coefficient data

- Start using (and learn how to use) a time profiler. lcov/gcov? gprof? Valgrind? Or https://code.google.com/p/high-performance-cplusplus-profiler/ 

- Frequency analysis tools (DFT) for the FDTD sim. Other signal processing tools are good too. 

- Chiggidy Check Yoself Before You Wreck Yoself for the visualizers and anything else that could easily crash

- Figure out how to output the OpenGL window to .png, .tif, .jpg OR make movies to .gif

- Problem writing holey_waveguide_defect geometry simulation to HDF5... only on school computer though... and only happens sometimes...

- Geometric Objects need to have an options to do a repeating circular pattern

- Explore using Boost library (what can it do for me?)... probably not a lot that c++11 and c++14 doesn't already have

- Keep a standard interface for Simulation classes. There doesn't seem to be a need for inheritance at this point

- start using iterators when possible

- Fix Mesh class and SimulationData class to have storage fields for both NodeData and ElementData (where data is associated per node or element, respectively)

- fix all class accessors to have both const and non-const options... this is important

- support boundary properties (with conditions that v=0, etc...)

- support initial conditions in a general manner

- support for cylindrical and polar coordinates (maybe not necessary)

- Interface for libMesh, Eigen, Boost, CGAL, and any other third party libraries that are useful

- make separate object files that can be used elsewhere, like Point3 and Vector3. Or use CGAL.

- Something is wrong with the Hull->contains_point() code... is this a double to float conversion issue?

- color by boundary doesn't work properly (b/c bool conversion to float maybe?)

- Check out the Fluent .cas, .msh and .neu files to see how they are stored. Maybe also be able to read these in and print them out. Also check out Ansys .cmdb and .dsdb format.

- Check out AutoCAD .dxf file format for parametric models. Also look at .obj and .ply formats. Look at .step and .iges files for 3D models

- Make sure that everything follows the model of having all necessary information contained in the base class, but with added functionality implemented in the derived classes. If this isn't satisfied, maybe they should be separate classes.

	***Visualixer todo:
- add a labelled colorbar to the visualixer
- Panning scale needs refinement
- Gimbal lock is still happening during manual rotation
- adding a colorby or alpha before adding an object (mesh, pointcloud) doesn't work b/c the number of points is still unknown... is there a workaround for this?
- Shading and Light source for mesh model viewer
- Make Normals a standard option in the base class. Then make point size adjustments and normals 
- for sim viz, have option to show vector arrows if it's a flow
- for small vertex values, there is a problem... The view matrix cuts off at values below 1e-9... which is common for my simulations of plasmas



- Doxygen comments for everything
- Equation setter
- Chemistry setter and data (lxcat?)
- Boundary conditions/ Initial Conditions
- Matrix equation assembler (parallelizable)
- Matrix equation solver (parallelizable)


:::::::Done:::::::
X - Mesh Class
X - Visualizer
X - Property setter
X - Geometry builder
X - Convert everything that uses char* to use std::string instead
X - Create separate Static Mesh and Mutable Mesh classes
X - separate out the visualixer classes into separate files
X - SimulationData class
X - Linear Algebra wrapper
X - RegularMesh derived from Mesh
X - Plasma Drift Diffusion Equation Solver
X - Plasma Momentum Transfer Equation Solver
X - FDTD Maxwell solver
X - Poisson equation solver
X - composite vector (cvector)
