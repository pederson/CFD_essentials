TODO:

- follow these rules: https://www.doc.ic.ac.uk/lab/cplus/c++.rules/chap7.html
	- inline member functions
	- copy constructor
	- const member functions
	- virtual destructor for base classes
	- assignment operator
	- always const reference to member data from public member functions

- Shading and Light source for mesh model viewer
- Create getters and setters for everything (encapsulation)
- support for cylindrical and polar coordinates
- Class for saving simulation output
- Create separate Static Mesh and Mutable Mesh classes

- add a ::print_detailed() function to classes for detailed debugging
- figure out a good way to store base data, optional data, and user-defined data in classes
	- idea: store it all in raw pointer arrays
	- access the raw data by a ::.data(std::string field) call
- make constructors that work with raw data pointers

- Interface for libMesh, Eigen, Boost, CGAL, and any other third party libraries that are useful

- make separate object files that can be used elsewhere, like Point. Or use CGAL. 

- Something is wrong with the Hull->contains_point() code...

- Check out the Fluent .cas, .msh and .neu files to see how they are stored. Maybe also be able to read these in and print them out. Also check out Ansys .cmdb and .dsdb format.
- Check out AutoCAD .dxf file format for parametric models. Also look at .obj and .ply formats. Look at .step and .iges files for 3D models

- Doxygen comments for everything
- Equation setter
- Boundary conditions/ Initial Conditions
- Source setter
- Matrix equation assembler (parallelizable)
- Matrix equation solver (parallelizable)


:::::::Done:::::::
X - Mesh Class
X - Visualizer
X - Property setter
X - Geometry builder
X - Convert everything that uses char* to use std::string instead
